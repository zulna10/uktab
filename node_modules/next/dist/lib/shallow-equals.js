"use strict";

var cov_2dftla0x41 = function () {
  var path = "/Users/NaoyukiKanezawa/github.com/zeit/next.js/lib/shallow-equals.js",
      hash = "3b36c18bb2036d8decd5c91bff680c7d43f6852d",
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/NaoyukiKanezawa/github.com/zeit/next.js/lib/shallow-equals.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "3": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "5": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "6": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 13
        }
      }
    },
    fnMap: {
      "0": {
        name: "shallowEquals",
        decl: {
          start: {
            line: 1,
            column: 24
          },
          end: {
            line: 1,
            column: 37
          }
        },
        loc: {
          start: {
            line: 1,
            column: 45
          },
          end: {
            line: 11,
            column: 1
          }
        }
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }]
      },
      "1": {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }]
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cov_2dftla0x41 = function () {
  var path = "/Users/NaoyukiKanezawa/github.com/zeit/next.js/lib/shallow-equals.js",
      hash = "3b36c18bb2036d8decd5c91bff680c7d43f6852d",
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/NaoyukiKanezawa/github.com/zeit/next.js/lib/shallow-equals.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "3": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "5": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "6": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 13
        }
      }
    },
    fnMap: {
      "0": {
        name: "shallowEquals",
        decl: {
          start: {
            line: 1,
            column: 24
          },
          end: {
            line: 1,
            column: 37
          }
        },
        loc: {
          start: {
            line: 1,
            column: 45
          },
          end: {
            line: 11,
            column: 1
          }
        }
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }]
      },
      "1": {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }]
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

exports.default = shallowEquals;
function shallowEquals(a, b) {
  ++cov_2dftla0x41.f[0];
  ++cov_2dftla0x41.f[0];
  ++cov_2dftla0x41.s[0];
  ++cov_2dftla0x41.s[0];

  for (var i in a) {
    ++cov_2dftla0x41.s[1];
    ++cov_2dftla0x41.s[1];

    if (b[i] !== a[i]) {
        ++cov_2dftla0x41.b[0][0];
        ++cov_2dftla0x41.b[0][0];
        ++cov_2dftla0x41.s[2];
        ++cov_2dftla0x41.s[2];
        return false;
      } else {
      ++cov_2dftla0x41.b[0][1];
      ++cov_2dftla0x41.b[0][1];
    }
  }

  ++cov_2dftla0x41.s[3];
  ++cov_2dftla0x41.s[3];
  for (var _i in b) {
    ++cov_2dftla0x41.s[4];
    ++cov_2dftla0x41.s[4];

    if (b[_i] !== a[_i]) {
        ++cov_2dftla0x41.b[1][0];
        ++cov_2dftla0x41.b[1][0];
        ++cov_2dftla0x41.s[5];
        ++cov_2dftla0x41.s[5];
        return false;
      } else {
      ++cov_2dftla0x41.b[1][1];
      ++cov_2dftla0x41.b[1][1];
    }
  }

  ++cov_2dftla0x41.s[6];
  ++cov_2dftla0x41.s[6];
  return true;
}