#!/usr/bin/env node
'use strict';

var cov_2p9dk5u90l = function () {
  var path = '/Users/NaoyukiKanezawa/github.com/zeit/next.js/bin/next-dev',
      hash = '4a03c112fdaeb46400e7d09264552f8c08cb78f3',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/NaoyukiKanezawa/github.com/zeit/next.js/bin/next-dev',
    statementMap: {
      '0': {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 41,
          column: 2
        }
      },
      '1': {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 25,
          column: 28
        }
      },
      '2': {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 57
        }
      },
      '3': {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 36,
          column: 3
        }
      },
      '4': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      '5': {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 112
        }
      },
      '6': {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 101
        }
      },
      '7': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 19
        }
      },
      '8': {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 39,
          column: 20
        }
      },
      '9': {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 40,
          column: 17
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 23,
            column: 6
          },
          end: {
            line: 23,
            column: 7
          }
        },
        loc: {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 37,
            column: 1
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 38,
            column: 7
          },
          end: {
            line: 38,
            column: 8
          }
        },
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 41,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 20,
            column: 36
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        }, {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0
    },
    f: {
      '0': 0,
      '1': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var cov_2p9dk5u90l = function () {
  var path = '/Users/NaoyukiKanezawa/github.com/zeit/next.js/bin/next-dev',
      hash = '6ad240269c7f935dbb9d54c8788c6cc04cf2c5c4',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/NaoyukiKanezawa/github.com/zeit/next.js/bin/next-dev',
    statementMap: {
      '0': {
        start: {
          line: 9,
          column: 13
        },
        end: {
          line: 18,
          column: 2
        }
      },
      '1': {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 37
        }
      },
      '2': {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 41,
          column: 2
        }
      },
      '3': {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 61
        }
      },
      '4': {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 25,
          column: 28
        }
      },
      '5': {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 57
        }
      },
      '6': {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 36,
          column: 3
        }
      },
      '7': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      '8': {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 112
        }
      },
      '9': {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 101
        }
      },
      '10': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 19
        }
      },
      '11': {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 39,
          column: 20
        }
      },
      '12': {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 40,
          column: 17
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 23,
            column: 6
          },
          end: {
            line: 23,
            column: 7
          }
        },
        loc: {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 37,
            column: 1
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 38,
            column: 7
          },
          end: {
            line: 38,
            column: 8
          }
        },
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 41,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 20,
            column: 36
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 20,
            column: 29
          }
        }, {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 36
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        }, {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0
    },
    f: {
      '0': 0,
      '1': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

require('source-map-support/register');

var _path = require('path');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _fs = require('mz/fs');

var _server = require('../server');

var _server2 = _interopRequireDefault(_server);

var _clean = require('../server/build/clean');

var _clean2 = _interopRequireDefault(_clean);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (++cov_2p9dk5u90l.s[0], (0, _minimist2.default)(process.argv.slice(2), {
  alias: {
    h: 'help',
    p: 'port'
  },
  boolean: ['h'],
  default: {
    p: 3000
  }
}));

var dir = (++cov_2p9dk5u90l.s[1], (0, _path.resolve)((++cov_2p9dk5u90l.b[0][0], (++cov_2p9dk5u90l.b[0][0], argv._[0])) || (++cov_2p9dk5u90l.b[0][1], (++cov_2p9dk5u90l.b[0][1], '.'))));

++cov_2p9dk5u90l.s[2];
++cov_2p9dk5u90l.s[0];
(0, _clean2.default)(dir).then((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
  var srv;
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ++cov_2p9dk5u90l.f[0];
          ++cov_2p9dk5u90l.f[0];
          srv = (++cov_2p9dk5u90l.s[3], new _server2.default({ dir: dir, dev: true, hotReload: true }));
          ++cov_2p9dk5u90l.s[4];
          ++cov_2p9dk5u90l.s[1];
          _context.next = 7;
          return srv.start(argv.port);

        case 7:
          ++cov_2p9dk5u90l.s[5];
          ++cov_2p9dk5u90l.s[2];

          console.log('> Ready on http://localhost:' + argv.port);

          // Check if pages dir exists and warn if not
          ++cov_2p9dk5u90l.s[6];
          ++cov_2p9dk5u90l.s[3];
          _context.next = 14;
          return (0, _fs.exists)((0, _path.join)(dir, 'pages'));

        case 14:
          if (_context.sent) {
            _context.next = 39;
            break;
          }

          ++cov_2p9dk5u90l.b[1][0];
          ++cov_2p9dk5u90l.b[1][0];
          ++cov_2p9dk5u90l.s[7];
          ++cov_2p9dk5u90l.s[4];
          _context.next = 21;
          return (0, _fs.exists)((0, _path.join)(dir, '..', 'pages'));

        case 21:
          if (!_context.sent) {
            _context.next = 29;
            break;
          }

          ++cov_2p9dk5u90l.b[2][0];
          ++cov_2p9dk5u90l.b[2][0];
          ++cov_2p9dk5u90l.s[8];
          ++cov_2p9dk5u90l.s[5];

          console.error('> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?');
          _context.next = 34;
          break;

        case 29:
          ++cov_2p9dk5u90l.b[2][1];
          ++cov_2p9dk5u90l.b[2][1];
          ++cov_2p9dk5u90l.s[9];
          ++cov_2p9dk5u90l.s[6];

          console.error('> Couldn\'t find a `pages` directory. Please create one under the project root');

        case 34:
          ++cov_2p9dk5u90l.s[10];
          ++cov_2p9dk5u90l.s[7];

          process.exit(1);
          _context.next = 41;
          break;

        case 39:
          ++cov_2p9dk5u90l.b[1][1];
          ++cov_2p9dk5u90l.b[1][1];

        case 41:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}))).catch(function (err) {
  ++cov_2p9dk5u90l.f[1];
  ++cov_2p9dk5u90l.f[1];
  ++cov_2p9dk5u90l.s[11];
  ++cov_2p9dk5u90l.s[8];

  console.error(err);
  ++cov_2p9dk5u90l.s[12];
  ++cov_2p9dk5u90l.s[9];
  process.exit(1);
});