'use strict';

var cov_1pt039opqp = function () {
  var path = '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/build/loaders/emit-file-loader.js',
      hash = 'f9e319d2471e1e006acd30bc303c9358b791be72',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/build/loaders/emit-file-loader.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 16,
          column: 1
        }
      },
      '1': {
        start: {
          line: 4,
          column: 2
        },
        end: {
          line: 4,
          column: 18
        }
      },
      '2': {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 53
        }
      },
      '3': {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 41
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 3,
            column: 17
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 47
          },
          end: {
            line: 16,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 7,
            column: 15
          },
          end: {
            line: 7,
            column: 43
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 55
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    f: {
      '0': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var cov_1pt039opqp = function () {
  var path = '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/build/loaders/emit-file-loader.js',
      hash = 'fef91cd999531f0e439c62ce864f1bd0acd27ac8',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/build/loaders/emit-file-loader.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 16,
          column: 1
        }
      },
      '1': {
        start: {
          line: 4,
          column: 2
        },
        end: {
          line: 4,
          column: 18
        }
      },
      '2': {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 50
        }
      },
      '3': {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 43
        }
      },
      '4': {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 55
        }
      },
      '5': {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 29
        }
      },
      '6': {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 43
        }
      },
      '7': {
        start: {
          line: 11,
          column: 27
        },
        end: {
          line: 11,
          column: 72
        }
      },
      '8': {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 53
        }
      },
      '9': {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 41
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 3,
            column: 17
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 47
          },
          end: {
            line: 16,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 7,
            column: 15
          },
          end: {
            line: 7,
            column: 43
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 7,
            column: 15
          },
          end: {
            line: 7,
            column: 25
          }
        }, {
          start: {
            line: 7,
            column: 29
          },
          end: {
            line: 7,
            column: 43
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 55
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 31
          }
        }, {
          start: {
            line: 8,
            column: 35
          },
          end: {
            line: 8,
            column: 55
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0
    },
    f: {
      '0': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

++cov_1pt039opqp.s[0];
++cov_1pt039opqp.s[0];


module.exports = function (content, sourceMap) {
  ++cov_1pt039opqp.f[0];
  ++cov_1pt039opqp.f[0];
  ++cov_1pt039opqp.s[1];
  ++cov_1pt039opqp.s[1];

  this.cacheable();

  var query = (++cov_1pt039opqp.s[2], _loaderUtils2.default.parseQuery(this.query));
  var name = (++cov_1pt039opqp.s[3], (++cov_1pt039opqp.b[0][0], (++cov_1pt039opqp.b[0][0], query.name)) || (++cov_1pt039opqp.b[0][1], (++cov_1pt039opqp.b[0][1], '[hash].[ext]')));
  var context = (++cov_1pt039opqp.s[4], (++cov_1pt039opqp.b[1][0], (++cov_1pt039opqp.b[1][0], query.context)) || (++cov_1pt039opqp.b[1][1], (++cov_1pt039opqp.b[1][1], this.options.context)));
  var regExp = (++cov_1pt039opqp.s[5], query.regExp);
  var opts = (++cov_1pt039opqp.s[6], { context: context, content: content, regExp: regExp });
  var interpolatedName = (++cov_1pt039opqp.s[7], _loaderUtils2.default.interpolateName(this, name, opts));

  ++cov_1pt039opqp.s[8];
  ++cov_1pt039opqp.s[2];
  this.emitFile(interpolatedName, content, sourceMap);

  ++cov_1pt039opqp.s[9];
  ++cov_1pt039opqp.s[3];
  this.callback(null, content, sourceMap);
};