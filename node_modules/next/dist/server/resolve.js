'use strict';

var cov_1qj7nw7zlp = function () {
  var path = '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/resolve.js',
      hash = 'ce72ce75e3f565a178e5f33da6f3c2c9ed2eef9f',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/resolve.js',
    statementMap: {
      '0': {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 10,
          column: 3
        }
      },
      '1': {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 9,
          column: 5
        }
      },
      '2': {
        start: {
          line: 8,
          column: 6
        },
        end: {
          line: 8,
          column: 14
        }
      },
      '3': {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 21
        }
      },
      '4': {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 14,
          column: 11
        }
      },
      '5': {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 22,
          column: 3
        }
      },
      '6': {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 28
        }
      },
      '7': {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 28
        }
      },
      '8': {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 39
        }
      },
      '9': {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 39
        }
      },
      '10': {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 54
        }
      },
      '11': {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 54
        }
      },
      '12': {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 34,
          column: 3
        }
      },
      '13': {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 44,
          column: 3
        }
      },
      '14': {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 27
        }
      },
      '15': {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 43
        }
      },
      '16': {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 42,
          column: 43
        }
      },
      '17': {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 13
        }
      },
      '18': {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 39
        }
      }
    },
    fnMap: {
      '0': {
        name: 'resolve',
        decl: {
          start: {
            line: 4,
            column: 30
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 43
          },
          end: {
            line: 15,
            column: 1
          }
        }
      },
      '1': {
        name: 'resolveFromList',
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 31
          }
        },
        loc: {
          start: {
            line: 17,
            column: 44
          },
          end: {
            line: 23,
            column: 1
          }
        }
      },
      '2': {
        name: 'getPaths',
        decl: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 17
          }
        },
        loc: {
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 35,
            column: 1
          }
        }
      },
      '3': {
        name: 'isFile',
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 21
          }
        },
        loc: {
          start: {
            line: 37,
            column: 26
          },
          end: {
            line: 46,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 28
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 28
          }
        }, {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 28
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 53
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 39
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 39
          }
        }, {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 39
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 54
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 54
          }
        }, {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 54
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 43
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 43
          }
        }, {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 43
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 45,
            column: 9
          },
          end: {
            line: 45,
            column: 39
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var cov_1qj7nw7zlp = function () {
  var path = '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/resolve.js',
      hash = '68b8c495d584d92f7a494f92a1c2d64d29914ace',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/NaoyukiKanezawa/github.com/zeit/next.js/server/resolve.js',
    statementMap: {
      '0': {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 28
        }
      },
      '1': {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 10,
          column: 3
        }
      },
      '2': {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 9,
          column: 5
        }
      },
      '3': {
        start: {
          line: 8,
          column: 6
        },
        end: {
          line: 8,
          column: 14
        }
      },
      '4': {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 51
        }
      },
      '5': {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 21
        }
      },
      '6': {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 14,
          column: 11
        }
      },
      '7': {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 28
        }
      },
      '8': {
        start: {
          line: 19,
          column: 14
        },
        end: {
          line: 19,
          column: 28
        }
      },
      '9': {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 22,
          column: 3
        }
      },
      '10': {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 28
        }
      },
      '11': {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 28
        }
      },
      '12': {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 53
        }
      },
      '13': {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 39
        }
      },
      '14': {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 39
        }
      },
      '15': {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 54
        }
      },
      '16': {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 54
        }
      },
      '17': {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 34,
          column: 3
        }
      },
      '18': {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 44,
          column: 3
        }
      },
      '19': {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 27
        }
      },
      '20': {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 43
        }
      },
      '21': {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 42,
          column: 43
        }
      },
      '22': {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 13
        }
      },
      '23': {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 39
        }
      }
    },
    fnMap: {
      '0': {
        name: 'resolve',
        decl: {
          start: {
            line: 4,
            column: 30
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 43
          },
          end: {
            line: 15,
            column: 1
          }
        }
      },
      '1': {
        name: 'resolveFromList',
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 31
          }
        },
        loc: {
          start: {
            line: 17,
            column: 44
          },
          end: {
            line: 23,
            column: 1
          }
        }
      },
      '2': {
        name: 'getPaths',
        decl: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 17
          }
        },
        loc: {
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 35,
            column: 1
          }
        }
      },
      '3': {
        name: 'isFile',
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 21
          }
        },
        loc: {
          start: {
            line: 37,
            column: 26
          },
          end: {
            line: 46,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 28
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 28
          }
        }, {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 28
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 53
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 26,
            column: 26
          },
          end: {
            line: 26,
            column: 28
          }
        }, {
          start: {
            line: 26,
            column: 31
          },
          end: {
            line: 26,
            column: 53
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 39
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 39
          }
        }, {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 39
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 54
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 54
          }
        }, {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 54
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 43
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 43
          }
        }, {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 43
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 45,
            column: 9
          },
          end: {
            line: 45,
            column: 39
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 45,
            column: 9
          },
          end: {
            line: 45,
            column: 22
          }
        }, {
          start: {
            line: 45,
            column: 26
          },
          end: {
            line: 45,
            column: 39
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var isFile = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(p) {
    var stat;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            ++cov_1qj7nw7zlp.f[3];
            ++cov_1qj7nw7zlp.f[3];
            stat = void 0;
            ++cov_1qj7nw7zlp.s[18];
            ++cov_1qj7nw7zlp.s[13];
            _context2.prev = 5;
            ++cov_1qj7nw7zlp.s[19];
            ++cov_1qj7nw7zlp.s[14];
            _context2.next = 10;
            return _fs2.default.stat(p);

          case 10:
            stat = _context2.sent;
            _context2.next = 30;
            break;

          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2['catch'](5);
            ++cov_1qj7nw7zlp.s[20];
            ++cov_1qj7nw7zlp.s[15];

            if (!(_context2.t0.code === 'ENOENT')) {
              _context2.next = 25;
              break;
            }

            ++cov_1qj7nw7zlp.b[5][0];
            ++cov_1qj7nw7zlp.b[5][0];
            ++cov_1qj7nw7zlp.s[21];
            ++cov_1qj7nw7zlp.s[16];
            return _context2.abrupt('return', false);

          case 25:
            ++cov_1qj7nw7zlp.b[5][1];
            ++cov_1qj7nw7zlp.b[5][1];

          case 27:
            ++cov_1qj7nw7zlp.s[22];
            ++cov_1qj7nw7zlp.s[17];
            throw _context2.t0;

          case 30:
            ++cov_1qj7nw7zlp.s[23];
            ++cov_1qj7nw7zlp.s[18];
            return _context2.abrupt('return', (++cov_1qj7nw7zlp.b[6][0], (++cov_1qj7nw7zlp.b[6][0], stat.isFile())) || (++cov_1qj7nw7zlp.b[6][1], (++cov_1qj7nw7zlp.b[6][1], stat.isFIFO())));

          case 33:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[5, 13]]);
  }));

  return function isFile(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.resolveFromList = resolveFromList;

var _path = require('path');

var _fs = require('mz/fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(id) {
    var paths, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, p, err;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            ++cov_1qj7nw7zlp.f[0];
            ++cov_1qj7nw7zlp.f[0];
            paths = (++cov_1qj7nw7zlp.s[0], getPaths(id));
            ++cov_1qj7nw7zlp.s[1];
            ++cov_1qj7nw7zlp.s[0];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 8;
            _iterator = (0, _getIterator3.default)(paths);

          case 10:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 29;
              break;
            }

            p = _step.value;
            ++cov_1qj7nw7zlp.s[2];
            ++cov_1qj7nw7zlp.s[1];
            _context.next = 16;
            return isFile(p);

          case 16:
            if (!_context.sent) {
              _context.next = 24;
              break;
            }

            ++cov_1qj7nw7zlp.b[0][0];
            ++cov_1qj7nw7zlp.b[0][0];
            ++cov_1qj7nw7zlp.s[3];
            ++cov_1qj7nw7zlp.s[2];
            return _context.abrupt('return', p);

          case 24:
            ++cov_1qj7nw7zlp.b[0][1];
            ++cov_1qj7nw7zlp.b[0][1];

          case 26:
            _iteratorNormalCompletion = true;
            _context.next = 10;
            break;

          case 29:
            _context.next = 35;
            break;

          case 31:
            _context.prev = 31;
            _context.t0 = _context['catch'](8);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 35:
            _context.prev = 35;
            _context.prev = 36;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 38:
            _context.prev = 38;

            if (!_didIteratorError) {
              _context.next = 41;
              break;
            }

            throw _iteratorError;

          case 41:
            return _context.finish(38);

          case 42:
            return _context.finish(35);

          case 43:
            err = (++cov_1qj7nw7zlp.s[4], new Error('Cannot find module ' + id));
            ++cov_1qj7nw7zlp.s[5];
            ++cov_1qj7nw7zlp.s[3];

            err.code = 'ENOENT';
            ++cov_1qj7nw7zlp.s[6];
            ++cov_1qj7nw7zlp.s[4];
            throw err;

          case 50:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[8, 31, 35, 43], [36,, 38, 42]]);
  }));

  function resolve(_x) {
    return _ref.apply(this, arguments);
  }

  return resolve;
}();

function resolveFromList(id, files) {
  ++cov_1qj7nw7zlp.f[1];
  ++cov_1qj7nw7zlp.f[1];

  var paths = (++cov_1qj7nw7zlp.s[7], getPaths(id));
  var set = (++cov_1qj7nw7zlp.s[8], new _set2.default(files));
  ++cov_1qj7nw7zlp.s[9];
  ++cov_1qj7nw7zlp.s[5];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = (0, _getIterator3.default)(paths), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var p = _step2.value;
      ++cov_1qj7nw7zlp.s[10];
      ++cov_1qj7nw7zlp.s[6];

      if (set.has(p)) {
          ++cov_1qj7nw7zlp.b[1][0];
          ++cov_1qj7nw7zlp.b[1][0];
          ++cov_1qj7nw7zlp.s[11];
          ++cov_1qj7nw7zlp.s[7];
          return p;
        } else {
        ++cov_1qj7nw7zlp.b[1][1];
        ++cov_1qj7nw7zlp.b[1][1];
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

function getPaths(id) {
  ++cov_1qj7nw7zlp.f[2];
  ++cov_1qj7nw7zlp.f[2];

  var i = (++cov_1qj7nw7zlp.s[12], _path.sep === '/' ? (++cov_1qj7nw7zlp.b[2][0], (++cov_1qj7nw7zlp.b[2][0], id)) : (++cov_1qj7nw7zlp.b[2][1], (++cov_1qj7nw7zlp.b[2][1], id.replace(/\//g, _path.sep))));

  ++cov_1qj7nw7zlp.s[13];
  ++cov_1qj7nw7zlp.s[8];
  if (i.slice(-3) === '.js') {
      ++cov_1qj7nw7zlp.b[3][0];
      ++cov_1qj7nw7zlp.b[3][0];
      ++cov_1qj7nw7zlp.s[14];
      ++cov_1qj7nw7zlp.s[9];
      return [i];
    } else {
    ++cov_1qj7nw7zlp.b[3][1];
    ++cov_1qj7nw7zlp.b[3][1];
  }++cov_1qj7nw7zlp.s[15];
  ++cov_1qj7nw7zlp.s[10];
  if (i[i.length - 1] === _path.sep) {
      ++cov_1qj7nw7zlp.b[4][0];
      ++cov_1qj7nw7zlp.b[4][0];
      ++cov_1qj7nw7zlp.s[16];
      ++cov_1qj7nw7zlp.s[11];
      return [i + 'index.js'];
    } else {
    ++cov_1qj7nw7zlp.b[4][1];
    ++cov_1qj7nw7zlp.b[4][1];
  }++cov_1qj7nw7zlp.s[17];
  ++cov_1qj7nw7zlp.s[12];
  return [i + '.js', (0, _path.join)(i, 'index.js')];
}